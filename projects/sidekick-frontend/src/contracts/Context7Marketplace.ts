/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"Context7Marketplace","structs":{},"methods":[{"name":"create_context","args":[{"type":"string","name":"ipfs_hash"},{"type":"uint64","name":"price"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"List a new AI context for sale","events":[],"recommendations":{}},{"name":"purchase_context","args":[{"type":"account","name":"seller"},{"type":"pay","name":"payment"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Purchase an AI context","events":[],"recommendations":{}}],"arcs":[22,28],"desc":"Context7 AI Marketplace Smart Contract","networks":{},"state":{"schema":{"global":{"ints":0,"bytes":0},"local":{"ints":1,"bytes":2}},"keys":{"global":{},"local":{"ipfs_hash":{"keyType":"AVMString","valueType":"AVMBytes","key":"aXBmc19oYXNo"},"price":{"keyType":"AVMString","valueType":"AVMUint64","key":"cHJpY2U="},"seller":{"keyType":"AVMString","valueType":"address","key":"c2VsbGVy"}},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":["OptIn"]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[54,91],"errorMessage":"OnCompletion is not NoOp"},{"pc":[135],"errorMessage":"Price must be greater than 0"},{"pc":[125],"errorMessage":"can only call when creating"},{"pc":[57,94,119],"errorMessage":"can only call when not creating"},{"pc":[326],"errorMessage":"check self.ipfs_hash exists for account"},{"pc":[175],"errorMessage":"check self.price exists for account"},{"pc":[73],"errorMessage":"transaction type is pay"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"byteCode":{"approval":"CiACAQAmAglpcGZzX2hhc2gFcHJpY2UxG0EAToICBOGt1J8EaA/6szYaAI4CACcAAiNDMRkURDEYRDYaARfAHDEWIglJOBAiEkSIAFqABBUffHVMULAiQzEZFEQxGEQ2GgE2GgKIABgiQzEZjQIACAADQv+8MRhEIkMxGBREIkOKAgCL/xdJRIv+VwIAMQAoTwJmMQApTwJmMQCABnNlbGxlcjEAZomKAgGL/iMpY0SL/zgHMgoSRIv/OAhLARJEi/84ADEAEkRJgQULgWQKTEsBCUsBCbGyCIv+sgcishAjsgGzsUmyCIAg/mhBA+cq8zuRsa65I66cBV9JsnMdC0C0I/cF/Zd0PGayByKyECOyAbOxsgiAIDD9zCMbnYw2Ca9/e7Hl74+WOkiwchNSje+9iG2WrkiEsgcishAjsgGzi/4jKGNEiQ==","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":10,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the Context7Marketplace contract
 */
export type Context7MarketplaceArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'create_context(string,uint64)void': {
      ipfsHash: string
      price: bigint | number
    }
    'purchase_context(account,pay)string': {
      seller: Uint8Array | string
      payment: AppMethodCallTransactionArgument
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'create_context(string,uint64)void': [ipfsHash: string, price: bigint | number]
    'purchase_context(account,pay)string': [seller: Uint8Array | string, payment: AppMethodCallTransactionArgument]
  }
}

/**
 * The return type for each method
 */
export type Context7MarketplaceReturns = {
  'create_context(string,uint64)void': void
  'purchase_context(account,pay)string': string
}

/**
 * Defines the types of available calls and state of the Context7Marketplace smart contract.
 */
export type Context7MarketplaceTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'create_context(string,uint64)void' | 'create_context', {
      argsObj: Context7MarketplaceArgs['obj']['create_context(string,uint64)void']
      argsTuple: Context7MarketplaceArgs['tuple']['create_context(string,uint64)void']
      returns: Context7MarketplaceReturns['create_context(string,uint64)void']
    }>
    & Record<'purchase_context(account,pay)string' | 'purchase_context', {
      argsObj: Context7MarketplaceArgs['obj']['purchase_context(account,pay)string']
      argsTuple: Context7MarketplaceArgs['tuple']['purchase_context(account,pay)string']
      returns: Context7MarketplaceReturns['purchase_context(account,pay)string']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    local: {
      keys: {
        ipfsHash: BinaryState
        price: bigint
        seller: string
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type Context7MarketplaceSignatures = keyof Context7MarketplaceTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type Context7MarketplaceNonVoidMethodSignatures = keyof Context7MarketplaceTypes['methods'] extends infer T ? T extends keyof Context7MarketplaceTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Context7Marketplace smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends Context7MarketplaceSignatures> = Context7MarketplaceTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Context7Marketplace smart contract to the method's return type
 */
export type MethodReturn<TSignature extends Context7MarketplaceSignatures> = Context7MarketplaceTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed local state of the application.
 */
export type LocalKeysState = Context7MarketplaceTypes['state']['local']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type Context7MarketplaceCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type Context7MarketplaceDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: Context7MarketplaceCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Context7Marketplace smart contract
 */
export abstract class Context7MarketplaceParamsFactory {
  /**
   * Constructs a no op call for the create_context(string,uint64)void ABI method
   *
   * List a new AI context for sale
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createContext(params: CallParams<Context7MarketplaceArgs['obj']['create_context(string,uint64)void'] | Context7MarketplaceArgs['tuple']['create_context(string,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'create_context(string,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.ipfsHash, params.args.price],
    }
  }
  /**
   * Constructs a no op call for the purchase_context(account,pay)string ABI method
   *
   * Purchase an AI context
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static purchaseContext(params: CallParams<Context7MarketplaceArgs['obj']['purchase_context(account,pay)string'] | Context7MarketplaceArgs['tuple']['purchase_context(account,pay)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'purchase_context(account,pay)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.seller, params.args.payment],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the Context7Marketplace smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class Context7MarketplaceFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `Context7MarketplaceFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new Context7MarketplaceClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new Context7MarketplaceClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the Context7Marketplace smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: Context7MarketplaceDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new Context7MarketplaceClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Context7Marketplace smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Context7Marketplace smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Context7Marketplace smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new Context7MarketplaceClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the Context7Marketplace smart contract
 */
export class Context7MarketplaceClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `Context7MarketplaceClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Context7Marketplace app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `Context7MarketplaceClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends Context7MarketplaceNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `Context7MarketplaceClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<Context7MarketplaceClient> {
    return new Context7MarketplaceClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `Context7MarketplaceClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<Context7MarketplaceClient> {
    return new Context7MarketplaceClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the Context7Marketplace smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The optIn result
       */
      bare: (params?: Expand<AppClientBareCallParams>) => {
        return this.appClient.params.bare.optIn(params)
      },
    },

    /**
     * Makes a clear_state call to an existing instance of the Context7Marketplace smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the Context7Marketplace smart contract using the `create_context(string,uint64)void` ABI method.
     *
     * List a new AI context for sale
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createContext: (params: CallParams<Context7MarketplaceArgs['obj']['create_context(string,uint64)void'] | Context7MarketplaceArgs['tuple']['create_context(string,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Context7MarketplaceParamsFactory.createContext(params))
    },

    /**
     * Makes a call to the Context7Marketplace smart contract using the `purchase_context(account,pay)string` ABI method.
     *
     * Purchase an AI context
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    purchaseContext: (params: CallParams<Context7MarketplaceArgs['obj']['purchase_context(account,pay)string'] | Context7MarketplaceArgs['tuple']['purchase_context(account,pay)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Context7MarketplaceParamsFactory.purchaseContext(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the Context7Marketplace smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The optIn result
       */
      bare: (params?: Expand<AppClientBareCallParams>) => {
        return this.appClient.createTransaction.bare.optIn(params)
      },
    },

    /**
     * Makes a clear_state call to an existing instance of the Context7Marketplace smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the Context7Marketplace smart contract using the `create_context(string,uint64)void` ABI method.
     *
     * List a new AI context for sale
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createContext: (params: CallParams<Context7MarketplaceArgs['obj']['create_context(string,uint64)void'] | Context7MarketplaceArgs['tuple']['create_context(string,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Context7MarketplaceParamsFactory.createContext(params))
    },

    /**
     * Makes a call to the Context7Marketplace smart contract using the `purchase_context(account,pay)string` ABI method.
     *
     * Purchase an AI context
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    purchaseContext: (params: CallParams<Context7MarketplaceArgs['obj']['purchase_context(account,pay)string'] | Context7MarketplaceArgs['tuple']['purchase_context(account,pay)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Context7MarketplaceParamsFactory.purchaseContext(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the Context7Marketplace smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The optIn result
       */
      bare: (params?: Expand<AppClientBareCallParams & SendParams>) => {
        return this.appClient.send.bare.optIn(params)
      },
    },

    /**
     * Makes a clear_state call to an existing instance of the Context7Marketplace smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the Context7Marketplace smart contract using the `create_context(string,uint64)void` ABI method.
     *
     * List a new AI context for sale
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createContext: async (params: CallParams<Context7MarketplaceArgs['obj']['create_context(string,uint64)void'] | Context7MarketplaceArgs['tuple']['create_context(string,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Context7MarketplaceParamsFactory.createContext(params))
      return {...result, return: result.return as unknown as (undefined | Context7MarketplaceReturns['create_context(string,uint64)void'])}
    },

    /**
     * Makes a call to the Context7Marketplace smart contract using the `purchase_context(account,pay)string` ABI method.
     *
     * Purchase an AI context
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    purchaseContext: async (params: CallParams<Context7MarketplaceArgs['obj']['purchase_context(account,pay)string'] | Context7MarketplaceArgs['tuple']['purchase_context(account,pay)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Context7MarketplaceParamsFactory.purchaseContext(params))
      return {...result, return: result.return as unknown as (undefined | Context7MarketplaceReturns['purchase_context(account,pay)string'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new Context7MarketplaceClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current Context7Marketplace app
   */
  state = {
    /**
     * Methods to access local state for the current Context7Marketplace app
     */
    local: (address: string | Address) => {
      const encodedAddress = typeof address === 'string' ? address : encodeAddress(address.publicKey)
      return {
        /**
         * Get all current keyed values from local state
         */
        getAll: async (): Promise<Partial<Expand<LocalKeysState>>> => {
          const result = await this.appClient.state.local(encodedAddress).getAll()
          return {
            ipfsHash: new BinaryStateValue(result.ipfs_hash),
            price: result.price,
            seller: result.seller,
          }
        },
        /**
         * Get the current value of the ipfs_hash key in local state
         */
        ipfsHash: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.local(encodedAddress).getValue("ipfs_hash")) as Uint8Array | undefined) },
        /**
         * Get the current value of the price key in local state
         */
        price: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("price")) as bigint | undefined },
        /**
         * Get the current value of the seller key in local state
         */
        seller: async (): Promise<string | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("seller")) as string | undefined },
      }
    },
  }

  public newGroup(): Context7MarketplaceComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a create_context(string,uint64)void method call against the Context7Marketplace contract
       */
      createContext(params: CallParams<Context7MarketplaceArgs['obj']['create_context(string,uint64)void'] | Context7MarketplaceArgs['tuple']['create_context(string,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createContext(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a purchase_context(account,pay)string method call against the Context7Marketplace contract
       */
      purchaseContext(params: CallParams<Context7MarketplaceArgs['obj']['purchase_context(account,pay)string'] | Context7MarketplaceArgs['tuple']['purchase_context(account,pay)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.purchaseContext(params)))
        resultMappers.push((v) => client.decodeReturnValue('purchase_context(account,pay)string', v))
        return this
      },
      get optIn() {
        return {
          bare: (params?: AppClientBareCallParams ) => {
            promiseChain = promiseChain.then(() => composer.addAppCall(client.params.optIn.bare(params)))
            return this
          },
        }
      },
      /**
       * Add a clear state call to the Context7Marketplace contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as Context7MarketplaceComposer
  }
}
export type Context7MarketplaceComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the create_context(string,uint64)void ABI method.
   *
   * List a new AI context for sale
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createContext(params?: CallParams<Context7MarketplaceArgs['obj']['create_context(string,uint64)void'] | Context7MarketplaceArgs['tuple']['create_context(string,uint64)void']>): Context7MarketplaceComposer<[...TReturns, Context7MarketplaceReturns['create_context(string,uint64)void'] | undefined]>

  /**
   * Calls the purchase_context(account,pay)string ABI method.
   *
   * Purchase an AI context
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  purchaseContext(params?: CallParams<Context7MarketplaceArgs['obj']['purchase_context(account,pay)string'] | Context7MarketplaceArgs['tuple']['purchase_context(account,pay)string']>): Context7MarketplaceComposer<[...TReturns, Context7MarketplaceReturns['purchase_context(account,pay)string'] | undefined]>

  /**
   * Gets available optIn methods
   */
  readonly optIn: {
    /**
     * Opts the user into an existing instance of the Context7Marketplace smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(params?: AppClientBareCallParams ): Context7MarketplaceComposer<[...TReturns, undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the Context7Marketplace smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): Context7MarketplaceComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): Context7MarketplaceComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<Context7MarketplaceComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<Context7MarketplaceComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<Context7MarketplaceComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<Context7MarketplaceComposerResults<TReturns>>
}
export type Context7MarketplaceComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

